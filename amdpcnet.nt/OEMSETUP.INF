;***********************************************************************
;
; OEMNADAM.INF
;
;       PCNET Family network card and driver SETUP INF file.
;
; History:
;***********************************************************************

;-----------------------------------------------------------------------
; OPTION TYPE
; -----------
; This identifies the Option type we are dealing with.  The different
; possible types are:
;
; COMPUTER, DISPLAY, MOUSE, KEYBOARD, LAYOUT, SCSI, PRINTER, ...
;
;  Types specific to networking:
;
; NetAdapter,        a netcard / adapter combination or just a netcard
; NetDriver,         just a netcard driver
; NetTransport,      a complete NDIS-compliant TDI transport stack
; NetService,        an NT networking service
; NetWork,           a complete network ensemble.
; NetProvider        a complete network which supports NT MPR protocol
;-----------------------------------------------------------------------

[Identification]
    OptionType = NetAdapter

;-----------------------------------------------------------------------
; PlatformsSupported
; ------------------
; This identifies the platforms supported by the adapter card.
; Possible types are:
;
; ISA and EISA
;-----------------------------------------------------------------------

[PlatformsSupported]
    ISA
    EISA

;-----------------------------------------------------------------------
; OPTION LIST
; -----------
; This section lists the OEM Option key names.  These keys are locale
; independent and used to represent the option in a locale independent
; manner.
;
;-----------------------------------------------------------------------

[Options]
    PCNTN3

;***********************************************************************
; CONSTANTS FOR USING DIALOGS
;***********************************************************************

[FileConstants]


GenericInfVersion  = " v2.50"
GenericAdapterName = " AMD PCNET Family Ethernet Adapter"
GenericDriverName  = "AMD PCNET Family Ethernet Adapter Driver"
GenericSysName     = "pcntn3.sys"
GenericName        = "PCNTN3"



;
;  File names, etc.
;
UtilityInf      = "UTILITY.INF"
ParamInf        = "NCPARAM.INF"
subroutineinf   = "SUBROUTN.INF"
SoftwareType    = "driver"
Exit_Code       = 0

;
; EventLog Message File
;
NetEventDLL     = "%SystemRoot%\System32\netevent.dll"
IoLogMsgDLL     = "%SystemRoot%\System32\IoLogMsg.dll"

; Product Info
;
Manufacturer    = "Microsoft"
ProductMajorVersion     = "3"
ProductMinorVersion     = "1"
ProductVersion  = $(ProductMajorVersion)"."$(ProductMinorVersion)

;
; Software
;
ProductSoftwareName     = "PCNTN3"
ProductSoftwareImagePath = "\SystemRoot\System32\drivers\"$(GenericSysName)
NetRuleSoftwareType     = "pcntn3Sys ndisDriver pcntn3Driver"

NetRuleSoftwareUse      = $(SoftwareType)
NetRuleSoftwareBindForm = """pcntn3Sys"" yes no container"

NetRuleSoftwareClass    = {"pcntn3Driver basic"}
NetRuleSoftwareBindable = {"pcntn3Driver pcntn3Adapter non exclusive 100"}
;
; Hardware
;
ProductHardwareName        = "PCNTN3"
NetRuleHardwareType        = "pcntn3 pcntn3Adapter"
NetRuleHardwareBindForm    = " yes yes container"
NetRuleHardwareClass       = {"pcntn3Adapter basic"}



;
; Registry Key
;
ProductKeyName  = $(!NTN_SoftwareBase)"\"$(Manufacturer)"\"$(ProductSoftwareName)"\CurrentVersion"
ParamKeyName    = $(!NTN_ServiceBase)"\"$(ProductHardwareName)"\Parameters"


[GeneralConstants]
;
;  Program flow control variables.
;
from      = ""
to        = ""
;
;  Return codes; Exit_Code is set to one of these
;
ExitCodeOk     = 0
ExitCodeCancel = 1
ExitCodeFatal  = 2

KeyNull         = ""
MAXIMUM_ALLOWED   = 33554432
RegistryErrorIndex = NO_ERROR
KeyProduct      = ""
KeyParameters   = ""

TRUE            = 1
FALSE           = 0
NoTitle            = 0

ExitState   = "Active"
OldVersionExisted = $(FALSE)

DriverPath      = $(!STF_NTPATH)\drivers

[date]
    ; Now is a list which contains { Sec from 1-1-1970, Year, Month, Day, Hour,
    ; Minute, Second }
    Now = {} ? $(!LIBHANDLE) GetSystemDate


;---------------------------------------------------------------------------
; 1. Identify
;
; DESCRIPTION:   To verify that this INF deals with the same type of options
;                as we are choosing currently.
;
; INPUT:         None
;
; OUTPUT:        $($R0): STATUS: STATUS_SUCCESSFUL
;                $($R1): Option Type (COMPUTER ...)
;                $($R2): Diskette description
;---------------------------------------------------------------------------

[Identify]
    ;
    ;
    read-syms Identification

    set Status     = STATUS_SUCCESSFUL
    set Identifier = $(OptionType)
    set Media      = #("Source Media Descriptions", 1, 1)

    Return $(Status) $(Identifier) $(Media)

;------------------------------------------------------------------------
; 2. ReturnOptions:
;
; DESCRIPTION:   To return the option list supported by this INF and the
;                localised text list representing the options.
;
;
; INPUT:         $($0):  Language used. ( ENG | FRN | ... )
;
; OUTPUT:        $($R0): STATUS: STATUS_SUCCESSFUL |
;                                STATUS_NOLANGUAGE
;                                STATUS_FAILED
;                                STATUS_NOTSUPPORTED
;
;                $($R1): Option List
;                $($R2): Option Text List
;------------------------------------------------------------------------

[ReturnOptions]
    ;
    ;
    set Status        = STATUS_FAILED
    set OptionList     = {}
    set OptionTextList = {}

    ;
    ; Check if the language requested is supported
    ;
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) in $(LanguageList)
        ;
        ; Check if the platforms requested is supported
        ;
        ifstr(i) $($1) == ""
                        goto returnoptions
        endif

        set PlatformList = ^(PlatformsSupported, 1)
        Ifcontains(i) $($1) in $(PlatformList)
                        goto returnoptions
        else
                        set Status = STATUS_NOTSUPPORTED
                        goto finish_ReturnOptions
        endif
    else
                set Status = STATUS_NOLANGUAGE
                goto finish_ReturnOptions
    endif

    ;
    ; form a list of all the options and another of the text representing
    ;

returnoptions = +
    set OptionList     = ^(Options, 1)
    set OptionTextList = ^(OptionsText$($0), 1)
    set Status         = STATUS_SUCCESSFUL

finish_ReturnOptions = +
    Return $(Status) $(OptionList) $(OptionTextList)

;------------------------------------------------------------------------
;
; InstallOption:
;
;      This section is shelled to by main installation processing
;      or by NCPASHEL.INF during reconfig, removal, update, etc.
;
;
; FUNCTION:  To copy files representing Options
;            To configure the installed option
;            To update the registry for the installed option
;
; INPUT:     $($0):  Language to use
;            $($1):  OptionID to install
;            $($2):  SourceDirectory
;            $($3):  AddCopy  (YES | NO)
;            $($4):  DoCopy   (YES | NO)
;            $($5):  DoConfig (YES | NO)
;
; OUTPUT:    $($R0): STATUS: STATUS_SUCCESSFUL |
;                            STATUS_NOLANGUAGE |
;                            STATUS_USERCANCEL |
;                            STATUS_FAILED
;
;------------------------------------------------------------------------
[InstallOption]
    ;
    ; Set default values for
    ;
    set Status   = STATUS_FAILED
    ;
    ; extract parameters
    ;
    set Option   = $($1)
    set SrcDir   = $($2)
    set AddCopy  = $($3)
    set DoCopy   = $($4)
    set DoConfig = $($5)

    ;
    ; Check if the language requested is supported
    ;
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) NOT-IN $(LanguageList)
        Return STATUS_NOLANGUAGE
    endif

    set-subst LF = "\n"

    read-syms GeneralConstants
    read-syms FileConstants

    read-syms DialogConstants$(!STF_LANGUAGE)
    ifstr(i) $(!NTN_Origination) == "NCPA"
        set Continue = $(OK)
    endif
    read-syms FileConstants$(!STF_LANGUAGE)

    detect date

    set-title  $(FunctionTitle)

    set to   = Begin
    set from = Begin
;
;  Assume all is well.
;
    set CommonStatus = STATUS_SUCCESSFUL

    EndWait

;
;   Set up the operation-mode-based variables and gaily welcome
;   the user.  If the "install mode" variable is improperly set,
;   assume this is a new installation.
;

Begin = +
    Set ActivateDetection = FALSE

    Ifstr(i) $(!NTN_InstallMode) == deinstall
        set StartLabel = removeadapter
    else-Ifstr(i) $(!NTN_InstallMode) == Update
        set StartLabel = UpgradeSoftware
    else-Ifstr(i) $(!NTN_InstallMode) == bind
        set StartLabel = bindingadapter
    else-Ifstr(i) $(!NTN_InstallMode) == configure
;        set ActivateDetection = TRUE
        set StartLabel = configureadapter
        ;
        ;   You cannot config the software component
        ;
        Ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
            Debug-Output "Cannot configure the PCNet family driver software."
            Shell $(UtilityInf),RegistryErrorString,CANNOT_CONFIGURE_SOFTWARE
            ifint $($ShellCode) != $(!SHELL_CODE_OK)
                Debug-Output "ShellCode error: cannot get an error string."
                goto ShellCodeError
            endif
            set Error = $($R0)
            set from = end
            set to = end
            goto nonfatalinfo
        endif
    else
;        set ActivateDetection = TRUE
        set StartLabel = installadapter
        set OEM_ABANDON_OPTIONS = {}
        set OEM_ABANDON_SOFTWARE = FALSE
        set OEM_ABANDON_ON = TRUE
    endif



    ;  set the default values

    ; IRQ Level = 3
    ; IRQ Level = Auto_Scan
    set IRQValue = *($(IRQList), 9)

    ; IOBase Address = 0x300
    ; IOBase Address = Auto_Scan
    set IOBaseAddrValue = *($(IOBaseAddrList), 17)

    ; DMAChannel = 5
    ; DMAChannel = Auto_Scan
    set DMAChannelValue = *($(DMAChannelList), 5)
    
    set RadioIn  = {7} 
    set BusScanValue = "ALL" 
    set LED0Value = *($(LEDList), 1)
    set LED1Value = *($(LEDList), 1)
    set LED2Value = *($(LEDList), 1)
    set LED3Value = *($(LEDList), 1)
    set TPValue = 1
    set FullDuplexValue = *($(FullDuplexList), 4)
    set BusTimerValue = *($(BusTimerList), 10)


    Set from = $(fatal)
    Set to = $(fatal)
    Goto $(StartLabel)

;-----------------------------------------------
; Installation Section
;-----------------------------------------------

installadapter = +
;
;   First, check whether the same version of the software exists
;
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct

    Ifstr $(KeyProduct) != $(KeyNull)
        ;
        ; Same version already existed in the local machine
        ; Popup the dialog and ask the user whether he wants to continue
        ;
        CloseRegKey $(KeyProduct)

        ifstr(i) !(NTN_RegBase) == $(ProductKeyName)
           ;
           ; Cannot Install the same software again
           ;
           Shell $(UtilityInf), VerExistedDlg, $(ProductSoftwareTitle),+
               $(ProductVersion)
           ifint $($ShellCode) != $(!SHELL_CODE_OK)
               Debug-Output "ShellCode error: cannot get an error string."
               goto ShellCodeError
           endif

           goto end
        else
           ;
           ; Add a new adapter card?
           ;
           Shell $(UtilityInf), CardExistedDlg

           ifint $($ShellCode) != $(!SHELL_CODE_OK)
               Debug-Output "ShellCode error: cannot get an error string."
               goto ShellCodeError
           endif

           ifstr(i) $($R1) != "OK"
               goto end
           endif
           set OldVersionExisted = $(TRUE)
        endif
    endif

    ; If we're installing a second time, don't re-copy the help file
    ; !!!
    ifint $(OldVersionExisted) == $(FALSE)
	ifstr(i) $(!NTN_InstallMode) == "install"
	   Ifstr(i) $(DoCopy) == "YES"
		Shell $(UtilityInf), DoAskSource, $(!STF_CWDDIR), $(SrcDir) NO
	      
		Ifint $($ShellCode) != $(!SHELL_CODE_OK)
		    Goto ShellCodeError
		Else-Ifstr(i) $($R0) == STATUS_FAILED
		    Shell $(UtilityInf) RegistryErrorString "ASK_SOURCE_FAIL"
		    ifint $($ShellCode) != $(!SHELL_CODE_OK)
			goto ShellCodeError
		    endif
		    set Error = $($R0)
		    Goto fatal
		Else-Ifstr(i) $($R0) == STATUS_USERCANCEL
		    Goto successful
		Endif
    
		Set SrcDir = $($R1)
	    endif

	    install "Install-Helpfile"
	endif
    endif

    SetHelpFile "pcnet.hlp" 1 11

;
;  dll load addition
;
    Shell $(UtilityInf), DoAskSource, $(!STF_CWDDIR), $(SrcDir) YES

    Ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Goto ShellCodeError
    Else-Ifstr(i) $($R0) == STATUS_FAILED
        Shell $(UtilityInf) RegistryErrorString "ASK_SOURCE_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
        Goto fatal
    Else-Ifstr(i) $($R0) == STATUS_USERCANCEL
        Goto successful
    Endif

    Set SrcDir = $($R1)

    install "Install-Dll"

    goto adaptersetup

;-----------------------------------------------
; Configuration Section
;-----------------------------------------------
;
;   Get the current values of all the parameters
;
configureadapter = +

    SetHelpFile "pcnet.hlp" 1 11

    Ifstr $(KeyProduct) == $(KeyNull)
        OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_RegBase) $(MAXIMUM_ALLOWED) KeyProduct
        Ifstr $(KeyProduct) == $(KeyNull)
            set RegistryErrorIndex = CANNOT_FIND_COMPONENT_SERVICE
            Debug-Output "Cannot find component product key"
            goto fatalregistry
        Endif
    Endif

    ;
    ; Get the other parameters;  they're attached to the service parameters key
    ;
    Debug-Output "INF: Shelling to FindService"
    Shell $(UtilityInf) FindService, $(KeyProduct)
    Ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "INF: FindService shell failure"
        Goto ShellCodeError
    Endif
    Ifstr(i) $($R0) != NO_ERROR
        Debug-Output "INF: FindService Shell error: "$($R0)
        Goto fatalregistry
    endif

    Set KeyParameters = $($R2)

    ;
    ;  We don't need the services key, so close it.
    ;
    CloseRegKey $($R1)

    Ifstr $(KeyParameters) == $(KeyNull)
        set RegistryErrorIndex = CANNOT_FIND_COMPONENT_SERVICE
        Debug-Output "Cannot find component service"
        goto fatalregistry
    endif

    set OldVersionExisted = $(TRUE)

    set ValueName = ""
    set ValueData = ""
    set ValueStr  = ""
    set ValueList = {}


    ;
    ; Get the old values
    ;
    EnumRegValue $(KeyParameters) ValueList

    ForListDo $(ValueList)
        set ValueItem = $($)
        set ValueName = *($(ValueItem),1)
        set ValueData = *($(ValueItem),4)
        ifstr(i) $(ValueName) == "BUS_TO_SCAN"
            set BusScanValue = $(ValueData)
        else-ifstr(i) $(ValueName) == "TP"
            set TPValue = $(ValueData)
        else-ifstr(i) $(ValueName) == "LED0"
            set LED0Value = $(ValueData)
        else-ifstr(i) $(ValueName) == "LED1"
            set LED1Value = $(ValueData)
        else-ifstr(i) $(ValueName) == "LED2"
            set LED2Value = $(ValueData)
        else-ifstr(i) $(ValueName) == "LED3"
            set LED3Value = $(ValueData)
        else-ifstr(i) $(ValueName) == "IOAddress"
            set IOBaseAddrValue = $(ValueData)
        else-ifstr(i) $(ValueName) == "Interrupt"
            set IRQValue = $(ValueData)
        else-ifstr(i) $(ValueName) == "DmaChannel"
            set DMAChannelValue = $(ValueData)             
        else-ifstr(i) $(ValueName) == "FDUP"
            set FullDuplexValue = $(ValueData)
        else-ifstr(i) $(ValueName) == "BUSTIMER"
            set BusTimerValue = $(ValueData)
        endif

    EndForListDo

                 
    Ifint $(TPValue) == 0
        Set CheckItemsIn = {"OFF"}
    Else
        Set CheckItemsIn = {"ON"}
    Endif                
    
    ; set the Radio Buttons depending on the bustype in the reg.
    
    Ifstr $(BusScanValue) == "PCI"
        Set RadioIn = {1}
    Else-Ifstr $(BusScanValue) == "PNP"
        Set RadioIn = {2}
    Else-Ifstr $(BusScanValue) == "VESA"
        Set RadioIn = {3}
    Else-Ifstr $(BusScanValue) == "ISA"
        Set RadioIn = {4}
    Else-Ifstr $(BusScanValue) == "PCI1"
        Set RadioIn = {5}
    Else-Ifstr $(BusScanValue) == "PCI2"
        Set RadioIn = {6}
    Else-Ifstr $(BusScanValue) == "ALL"
        Set RadioIn = {7}
    Else-Ifstr $(BusScanValue) == ""
        Set RadioIn = {7}
    Endif

    Debug-Output $(InfName)" TP is "$(TPValue)

    set IRQValue = *($(IRQList), ~($(IRQValues),$(IRQValue)))
    ifstr(i) $(IRQValue) == ""
        set IRQValue = *($(IRQList), 2)
    endif

    Debug-Output $(InfName)" IRQ_Level is "$(IRQValue)

    set DMAChannelValue = *($(DMAChannelList), ~($(DMAChannelValues),$(DMAChannelValue)))
    ifstr(i) $(DMAChannelValue) == ""
        set DMAChannelValue = *($(DMAChannelList), 2)
    endif

    Debug-Output $(InfName)" DMA is "$(DMAChannelValue)

    set IOBaseAddrValue = *($(IOBaseAddrList), ~($(IOBaseAddrValues),$(IOBaseAddrValue)))

    ifstr(i) $(IOBaseAddrValue) == ""
        set IOBaseAddrValue = *($(IOBaseAddrList), 1)
    endif

    Debug-Output $(InfName)" I/o base is "$(IOBaseAddrValue)

    set LED0Value = *($(LEDList), ~($(LEDValues),$(LED0Value)))

    ifstr(i) $(LED0Value) == ""
        set LED0Value = *($(LEDList), 1)
    endif

    Debug-Output $(InfName)" LED0 is "$(LED0Value)

    set LED1Value = *($(LEDList), ~($(LEDValues),$(LED1Value)))

    ifstr(i) $(LED1Value) == ""
        set LED1Value = *($(LEDList), 1)
    endif

    Debug-Output $(InfName)" LED1 is "$(LED1Value)

    set LED2Value = *($(LEDList), ~($(LEDValues),$(LED2Value)))

    ifstr(i) $(LED2Value) == ""
        set LED2Value = *($(LEDList), 1)
    endif

    Debug-Output $(InfName)" LED2 is "$(LED0Value)

    set LED3Value = *($(LEDList), ~($(LEDValues),$(LED3Value)))

    ifstr(i) $(LED3Value) == ""
        set LED3Value = *($(LEDList), 1)
    endif

    Debug-Output $(InfName)" LED3 is "$(LED3Value)

    set FullDuplexValue = *($(FullDuplexList), ~($(FullDuplexValues),$(FullDuplexValue)))

    ifstr(i) $(FullDuplexValue) == ""
        set FullDuplexValue = *($(FullDuplexList), 1)
    endif

    Debug-Output $(InfName)" Full Duplex is "$(FullDuplexValue)

    set BusTimerValue = *($(BusTimerList), ~($(BusTimerValues),$(BusTimerValue)))

    ifstr(i) $(BusTimerValue) == ""
        set BusTimerValue = *($(BusTimerList), 1)
    endif

    Debug-Output $(InfName)" Bus Timer is "$(BusTimerValue)

    ;  Save the settings as they were read from the Registry.

;    Shell $(ParamInf) Param_SaveValues
;    Set CurrParamSettings = $($R0)
;
;   Put up the adapter configuration dialog if necessary.
;
;   Note that $(CurrParamSettings) has the old known parameter values.
;
adaptersetup = +


;    Shell "" DebugConfiguration "before displaying dialog"

    Set from = adapteroptions


adapteroptions = +


    LoadLibrary "Disk 1" $(DialogDllName) hLib

    read-syms FileDependentDlg$(!STF_LANGUAGE)

    Debug-Output $(InfName)" Bus is "$(BusScanValue)
    Debug-Output $(InfName)" TP is "$(TPValue)
    Debug-Output $(InfName)" LED0 is "$(LED0Value)
    Debug-Output $(InfName)" LED1 is "$(LED1Value)
    Debug-Output $(InfName)" LED2 is "$(LED2Value)
    Debug-Output $(InfName)" LED3 is "$(LED3Value)
    Debug-Output $(InfName)" DMA is "$(DMAChannelValue)
    Debug-Output $(InfName)" I/o base is "$(IOBaseAddrValue)
    Debug-Output $(InfName)" Full Duplex is "$(FullDuplexValue)
    Debug-Output $(InfName)" Bus Timer is "$(BusTimerValue)


    ui start "InputDlg"  $(hLib)

    set ExitButton      = $(ButtonPressed)

    Debug-Output " ButtonPressed "$(ButtonPressed)


    FreeLibrary $(hLib)

    ifstr(i) $(DLGEVENT) == "CONTINUE"
                set IOBaseAddrValue = $(Combo1Out)
                set IRQValueValue = $(Combo2Out)
                set DMAChannelValue = $(Combo3Out)
                set FullDuplexValue = $(Combo4Out)
                set BusTimerValue = $(Combo5Out)
                set LED0Value = $(Combo6Out)
                set LED1Value = $(Combo7Out)
                set LED2Value = $(Combo8Out)
                set LED3Value = $(Combo9Out)
                set ExitButton = $(ButtonPressed)

                set BusIndex = *($(RadioOut),1)

                Debug-Output $(InfName)" Busindex is "$(BusIndex)

                Ifint $(BusIndex) == 1
                    Set BusScanValue = "PCI"
                else-Ifint $(BusIndex) == 2
                    Set BusScanValue = "PNP"
                else-Ifint $(BusIndex) == 3
                    Set BusScanValue = "VESA"
                else-Ifint $(BusIndex) == 4
                    Set BusScanValue = "ISA"
                else-Ifint $(BusIndex) == 5
                    Set BusScanValue = "PCI1"
                else-IFint $(BusIndex) == 6
                    Set BusScanValue = "PCI2"
                else-Ifint $(BusIndex) ==  7
                    Set BusScanValue = "ALL"
                Endif

                                    
        Set Chk = *($(CheckItemsOut), 1)     
        Ifstr(i) $(Chk) == "ON"
            Set TPValue = 1
        Else
            Set TPValue = 0
        Endif

                ui pop 1
;               goto nextstep
    else-ifstr(i) $(DLGEVENT) == "EXIT"
                set CommonStatus = STATUS_USERCANCEL
                Debug-Output "Action: exit. Bye."
                ui pop 1
                goto end
    else
                ;
                ; Unknow command
                ;
                ui pop 1


                Debug-Output "Action: unknown. Bye."
                goto end
    endif


    Debug-Output " Combo list out "$(ComboListItemsOut)


;
;   If installing, go create the necessary keys;
;   if configuring, they're already open.
;
skipoptions =+

    ifint $(OldVersionExisted) == $(TRUE)                               
        ifstr(i) $(!NTN_InstallMode) == configure
            goto writeparameters
        endif                                                                
    endif
    StartWait
    ;
    ; Add Software Component
    ;
    ifint $(OldVersionExisted) == $(FALSE)

        ifstr(i) $(!NTN_InstallMode) == "install"
           Ifstr(i) $(DoCopy) == "YES"

              Shell $(UtilityInf), DoAskSource, $(!STF_CWDDIR), $(SrcDir) YES

              Ifint $($ShellCode) != $(!SHELL_CODE_OK)
                  Goto ShellCodeError
              Else-Ifstr(i) $($R0) == STATUS_FAILED
                  Shell $(UtilityInf) RegistryErrorString "ASK_SOURCE_FAIL"
                  ifint $($ShellCode) != $(!SHELL_CODE_OK)
                      goto ShellCodeError
                  endif
                  set Error = $($R0)
                  Goto fatal
              Else-Ifstr(i) $($R0) == STATUS_USERCANCEL
                  Goto successful
              Endif

              Set SrcDir = $($R1)

           Endif

           install "Install-Option"

           ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
              Shell $(UtilityInf) RegistryErrorString "UNABLE_COPY_FILE"
              ifint $($ShellCode) != $(!SHELL_CODE_OK)
                  goto ShellCodeError
              endif
              set Error = $($R0)
              goto fatal
           endif
        endif



        Shell $(UtilityInf), AddSoftwareComponent, $(Manufacturer), +
            $(ProductSoftwareName), +
            $(ProductSoftwareName), +
            $(ProductSoftwareTitle), $(STF_CONTEXTINFNAME), +
            $(ProductSoftwareImagePath), "kernel", "NDIS", {}, "",+
            $(NetEventDLL)

        Set OEM_ABANDON_SOFTWARE = TRUE

        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error"
            goto ShellCodeError
        endif
        ;
        ;   At this point:
        ;     $R1 contains the product version key handle;
        ;     $R2 contains the NetRules subkey handle;
        ;     $R3 contains the new Services key handle; and
        ;     $R4 contains the Parameters key
        ;     $R5 contains the Linkage Key
        ;
        set RegistryErrorIndex = $($R0)
        set KeyProduct      = $($R1)
        Set SoftNetRulesKey = $($R2)
        CloseRegKey $($R3)
        CloseRegKey $($R4)
        CloseRegKey $($R5)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "Registry error: add software components"
            CloseRegKey $(KeyProduct)
            CloseRegKey $(SoftNetRulesKey)
            goto fatalregistry
        endif

        set NewValueList = {{SoftwareType,$(NoTitle),$(!REG_VT_SZ),$(SoftwareType)},+
                           {MajorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMajorVersion)},+
                           {MinorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMinorVersion)},+
                           {Title,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareTitle)},+
                           {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareDescription)},+
                           {ServiceName,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareName)},+
                           {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}

        Shell  $(UtilityInf), AddValueList, $(KeyProduct), $(NewValueList)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error."
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "Registry error: add value list."
            CloseRegKey $(KeyProduct)
            CloseRegKey $(SoftNetRulesKey)
            goto fatalregistry
        endif

        set NewValueList = {{type,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareType)},+
                            {use,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareUse)}, +
                            {bindform,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareBindForm)}, +
                            {class,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleSoftwareClass)}, +
                            {bindable,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleSoftwareBindable)}, +
                            {InfOption,$(NoTitle),$(!REG_VT_SZ),$(Option)}}

        Shell  $(UtilityInf), AddValueList, $(SoftNetRulesKey), $(NewValueList)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error."
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        CloseRegKey $(KeyProduct)
        CloseRegKey $(SoftNetRulesKey)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "Resgitry error: add value list."
            goto fatalregistry
        endif
    endif
;
;   Create the HARDWARE\Netcard region and its corresponding service
;
    Shell $(UtilityInf), AddHardwareComponent, $(ProductHardwareName),$(STF_CONTEXTINFNAME),$(ProductKeyName)

    ifint $($R4) != -1
        Set OEM_ABANDON_OPTIONS = >($(OEM_ABANDON_OPTIONS), $(!NTN_SoftwareBase)"\Microsoft\Windows NT\CurrentVersion\NetworkCards\"$($R4))
    endif

    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "Cannot add hardware component"
        goto ShellCodeError
    endif

    set RegistryErrorIndex = $($R0)

    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
        EndWait
        Debug-Output "Registry error: add hardware component"
        CloseRegKey $($R1)
        CloseRegKey $($R2)
        CloseRegKey $($R3)
        goto fatalregistry
    endif

;
;   At this point:
;     $R1  Registry key variable for HARDWARE\Netcard\(n)
;     $R2  Registry key variable for HARDWARE\Netcard\(n)\\NetRules
;     $R3  Registry key handle for <service>\Parameters key
;     $R4  Adapter number assigned to adapter
;     $R5  Service name generated by combining svc name with adapter number
;
    set KeyParameters = $($R3)
    set KeyAdapterRules = $($R2)
    set AdapterNumber = $($R4)

    set NewValueList = {{Manufacturer,$(NoTitle),$(!REG_VT_SZ),$(Manufacturer)},+
                       {Title,$(NoTitle),$(!REG_VT_SZ),"["$($R4)"] "$(ProductHardware$(Option)Title)},+
                       {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductHardware$(Option)Description)},+
                       {ProductName,$(NoTitle),$(!REG_VT_SZ),$(ProductHardwareName)},+
                       {ServiceName,$(NoTitle),$(!REG_VT_SZ),$($R5)},+
                       {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}

    Shell  $(UtilityInf), AddValueList, $($R1), $(NewValueList)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "ShellCode error"
        goto ShellCodeError
    endif

    CloseRegKey $($R1)

    set TempProdName = """"$(ProductHardwareName)$(AdapterNumber)""""
    set TempBindForm = $(TempProdName)$(NetRuleHardwareBindForm)

    set NewValueList = {{type,$(NoTitle),$(!REG_VT_SZ),$(NetRuleHardwareType)},+
                        {bindform,$(NoTitle),$(!REG_VT_SZ),$(TempBindForm)}, +
                        {class,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleHardwareClass)}, +
                        {InfOption,$(NoTitle),$(!REG_VT_SZ),$(Option)}}

    Shell  $(UtilityInf), AddValueList, $(KeyAdapterRules), $(NewValueList)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "ShellCode error."
        goto ShellCodeError
    endif

    set RegistryErrorIndex = $($R0)

    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
        EndWait
        Debug-Output "Resgitry error: add value list."
        CloseRegKey $(KeyParameters)
        CloseRegKey $(KeyAdapterRules)
        goto fatalregistry
    endif

    CloseRegKey $(KeyAdapterRules)

    goto writeparameters
;
;   REQUIRED:   $(KeyParameters) contains service Parameters key handle
;
writeparameters = +
    Shell $(UtilityInf), GetBusTypeNum
    set BusTypeNum = $($R1)
; Testing the BusNum. We are coding it to 0
    set BusNumberValue = 0 ;
; End of BusNumber
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "ShellCode error."
        goto ShellCodeError
    endif

    set DMAChannelValue = *($(DMAChannelValues), ~($(DMAChannelList),$(DMAChannelValue)))

    set IRQValue = *($(IRQValues), ~($(IRQList),$(IRQValueValue)))

    set IOBaseAddrValue = *($(IOBaseAddrValues), ~($(IOBaseAddrList),$(IOBaseAddrValue)))

    set LED0Value = *($(LEDValues), ~($(LEDList),$(LED0Value)))
    set LED1Value = *($(LEDValues), ~($(LEDList),$(LED1Value)))
    set LED2Value = *($(LEDValues), ~($(LEDList),$(LED2Value)))
    set LED3Value = *($(LEDValues), ~($(LEDList),$(LED3Value)))
    set FullDuplexValue = *($(FullDuplexValues), ~($(FullDuplexList),$(FullDuplexValue)))
    set BusTimerValue = *($(BusTimerValues), ~($(BusTimerList),$(BusTimerValue)))

  ; Ifint $(TPValue) != 0
    set NewValueList = {{BUS_TO_SCAN,$(NoTitle),$(!REG_VT_SZ),$(BusScanValue)},+
                        {BusType,$(NoTitle),$(!REG_VT_DWORD),$(BusTypeNum)},+
                        {MediaType,$(NoTitle),$(!REG_VT_DWORD),1},+
                        {LED0,  $(NoTitle),$(!REG_VT_DWORD),$(LED0Value)},+
                        {LED1,  $(NoTitle),$(!REG_VT_DWORD),$(LED1Value)},+
                        {LED2,  $(NoTitle),$(!REG_VT_DWORD),$(LED2Value)},+
                        {LED3,  $(NoTitle),$(!REG_VT_DWORD),$(LED3Value)},+
                        {FDUP,  $(NoTitle),$(!REG_VT_DWORD),$(FullDuplexValue)},+
                        {BUSTIMER,  $(NoTitle),$(!REG_VT_DWORD),$(BusTimerValue)},+
                        {TP,    $(NoTitle),$(!REG_VT_DWORD),$(TPValue)},+
                        {IOAddress,  $(NoTitle),$(!REG_VT_DWORD),$(IOBaseAddrValue)},+
                        {Interrupt,  $(NoTitle),$(!REG_VT_DWORD),$(IRQValue)},+
                        {DMAChannel, $(NoTitle),$(!REG_VT_DWORD),$(DMAChannelValue)},+
                        {BusNumber,  $(NoTitle),$(!REG_VT_DWORD),$(BusNumberValue)}}

    Shell  $(UtilityInf), AddValueList, $(KeyParameters), $(NewValueList)

    CloseRegKey $(KeyParameters)

    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "ShellCode error."
        goto ShellCodeError
    endif

    set RegistryErrorIndex = $($R0)

    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
        Debug-Output "Registry error: Add value list"
        goto fatalregistry
    endif

    EndWait

    goto successful

;-----------------------------------------------
; Binding section
;-----------------------------------------------
bindingadapter =+
    set Error = "Binding: Sorry, not yet implemented."
    goto fatal

;-----------------------------------------------
; Removeadapter section
;-----------------------------------------------

removeadapter = +
    Ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
        ; Remove Software Component
        Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
            $(ProductSoftwareName)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error"
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
    else
        Shell $(UtilityInf), RemoveHardwareComponent, $(Manufacturer), +
            $(ProductSoftwareName), $(!NTN_RegBase)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error"
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
    endif

    goto end

;-----------------------------------------------
; Upgrade Software section
;-----------------------------------------------

UpgradeSoftware = +
    ;
    ; First determine whether we want to do upgrade or update for software
    ; or hardware component. Then we will determine whether the Mode is
    ; update or upgrade.
    ;
    ; If the same version of the product existed in the registry, we do
    ; update. Otherwise, we will do a upgrade
    ;
    ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
        ; Upgrade software component
        ;
        ; see whether the same version exist or not
        ;
        OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct

        Ifstr $(KeyProduct) != $(KeyNull)
            GetRegValue $(KeyProduct),"MajorVersion", VersionInfo
            set Version = *($(VersionInfo), 4)

            ;
            ; Update the binaries
            ;
            Shell $(UtilityInf), GetInfFileNameFromRegistry, $(KeyProduct)

            ifint $($ShellCode) != $(!SHELL_CODE_OK)
                Debug-Output "ShellCode error"
                goto ShellCodeError
            endif

            set !UG_Filename = $($R0)

            ifstr(i) $(!UG_Filename) != ""
                install "Install-Update"
                ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
                    goto fatal
                endif
            endif

            ; Upgrade the version number
            ;
            SetRegValue $(KeyProduct) {MajorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMajorVersion)}
            SetRegValue $(KeyProduct) {MinorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMinorVersion)}

            ;
            ; do nothing for update
            ;
            ifint $(Version) != $(ProductVersion)
               ;
               ; If the major version number is not the same,
               ; it is major upgrade. So let Upgrade the product
               ;
               ;
               ; make other upgrade change if necessary
               ;
            endif
            CloseRegKey $(KeyProduct)
        else
            ;
            ; Cannot Open software key, goto ERROR
            ;
            goto fatalregistry
        endif
    else
        ;
        ; upgrade/update hardware component
        ; There is no different between upgrade and update for hardware
        ; component
        ;
        ; 1. Get the Service Name
        ; 2. Change the NetRule section if necessary
        ;
        OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_RegBase) +
              $(MAXIMUM_ALLOWED) NetworkCardKey
        Ifstr(i) $(NetworkCardKey) != $(KeyNull)
            ;
            ; Get Service name
            ;
            GetRegValue $(NetworkCardKey),"ServiceName", ServiceNameInfo
            set ServiceName = *($(ServiceNameInfo), 4)

            ;
            ; Change the NetRule if necessary
            ;
            OpenRegKey $(NetworkCardKey) "" "NetRules" +
                $(MAXIMUM_ALLOWED) NetRuleKey
            Ifstr(i) $(NetRuleKey) != $(KeyNull)
                ;
                ; Make the change....
                ;
            else
                ;
                ; Error, cannot open net rules key
                ;
                goto fatalregistry
            endif

            CloseRegKey $(NetRules)
            CloseRegKey $(NetworkCardKey)
        else
            ;
            ; Error, cannot open network card key
            ;
            goto fatalregistry
        endif
        ;
        ; 3. Change the service section of the hardware. i.e.,
        ;    ParameterName change, value change, etc.
        ;
        OpenRegKey $(!REG_H_LOCAL) "" +
              $(!NTN_ServiceBase)"\"$(ServiceName) +
              $(MAXIMUM_ALLOWED) ServiceKey

        Ifstr(i) $(ServiceKey) != $(KeyNull)
            ;
            ; Get the ServiceKey to change the Start value
            ; or Type value. Or open Parameters key to
            ; change the hardware parameters if necessary.
            ;
            CloseRegKey $(ServiceKey)
        else
            ;
            ; Error, cannot open network card key
            ;
            goto fatalregistry
        endif
    endif

    goto end
    ;
    ; End of Upgrade Software
    ;

;
;  Escape hatches
;
successful = +
    goto end

abandon = +
    ForListDo $(OEM_ABANDON_OPTIONS)
        Shell $(UtilityInf), RemoveHardwareComponent, $(Manufacturer), +
            $(ProductSoftwareName), $($)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error"
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
    EndForListDo

    Ifstr(i) $(OEM_ABANDON_SOFTWARE) == TRUE
        ; Remove Software Component
        Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
            $(ProductSoftwareName), FALSE
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error"
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
    endif

    goto end

;
; warning display
;
warning = +
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "WARNING", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(to)
    else-ifstr(i) $($R1) == "CANCEL"
        goto $(from)
    else
        goto "end"
    endif
;
; non fatal error display
;
nonfatalinfo = +
    Set Severity = STATUS
    Set CommonStatus = STATUS_USERCANCEL
    goto nonfatalmsg
nonfatal = +
    Set Severity = NONFATAL
    goto nonfatalmsg
nonfatalmsg = +
    ifstr(i) $(Error) == ""
        Set Severity = NONFATAL
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), $(Severity), $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(from)
    else
        goto "end"
    endif

;
;  Registry is broken
;
fatalregistry = +
    Shell $(UtilityInf) RegistryErrorString $(RegistryErrorIndex)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    set Error = $($R0)
    goto fatal
;
;  Netcard detection failure
;
fataldetect = +
    Shell $(UtilityInf),RegistryErrorString,CANNOT_DETECT
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "ShellCode error: cannot get an error string."
        goto ShellCodeError
    endif
    set Error = $($R0)
    Goto fatal
;
; fatal error display
;
fatal = +
    ifstr(i) $(Error) == ""
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "FATAL", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif

    goto setfailed

;
;  Shelling error
;
ShellCodeError = +
    set DlgType      = "MessageBox"
    set STF_MB_TITLE = $(ShellCodeErrorTitle)
    set STF_MB_TEXT  = $(ShellCodeErrorText) 
    set STF_MB_TYPE  = 1
    set STF_MB_ICON  = 3
    set STF_MB_DEF   = 1
    ui start "Error Message"
    goto setfailed

setfailed = +
    set CommonStatus = STATUS_FAILED
    ;
    ; if OEM_ABANDON_ON == TRUE, then remove the registry entries
    ;
    ifstr(i) $(OEM_ABANDON_ON) == TRUE
        set OEM_ABANDON_ON = FALSE
        goto abandon
    endif
    goto end

end = +
    goto term

term = +

    Return $(CommonStatus)

[DebugConfiguration]

    Set InfName = "OEMNADAM.INF"
    Debug-Output $(InfName)" **CONFIGURATION STATE: "$($0)
    Debug-Output $(InfName)" IRQ_Level is "$(!p:IRQ_Level)
    Debug-Output $(InfName)" IOBaseAddrValue is "$(!p:IOBaseAddrValue)
    Debug-Output $(InfName)" TransceiverValue is "$(!p:TransceiverValue)
    Debug-Output $(InfName)" MemBaseAddrDec is "$(!p:MemBaseAddrDec)
    Debug-Output $(InfName)" MappedValue is "$(!p:MappedValue)

    return


;***************************************************************
;  INSTALL SECTIONS
;***************************************************************
[Install-Option]
    set STF_VITAL = ""

    ifstr(i) $(AddCopy) == "YES"

        ;
        ; Add the files to the copy list
        ;
        ;  BUGBUG: eliminate the "nt2" in the next line when Sunil fixes
        ;      the other INF files
        ;
        AddSectionFilesToCopyList Files-$(Option) $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers

    endif

    ifstr(i) $(DoCopy) == "YES"

       ;
       ; Copy files in the copy list
       ;
       set !STF_NCPA_FLUSH_COPYLIST = TRUE
       CopyFilesInCopyList

    endif

    Exit

[Install-Update]
   set STF_VITAL        = ""
   set STF_OVERWRITE    = "VERIFYSOURCEOLDER"
   ;set STF_VERSION     = "YES"

   AddSectionFilesToCopyList Files-$(Option) $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers
   AddSectionFilesToCopyList Files-Inf $(SrcDir) $(!STF_WINDOWSSYSPATH)

   set !STF_NCPA_FLUSH_COPYLIST = TRUE
   CopyFilesInCopyList

   exit

[Install-Helpfile]
   Debug-Output "At Install-Helpfile"
   set STF_VITAL        = ""
   set STF_OVERWRITE    = "VERIFYSOURCEOLDER"
   ;set STF_VERSION     = "YES"
    set !STF_NCPA_FLUSH_COPYLIST = TRUE
    
   AddSectionFilesToCopyList Files-hlp $(SrcDir) $(!STF_WINDOWSSYSPATH)
   CopyFilesInCopyList

   exit



[Install-Dll]
   set STF_VITAL        = ""
   AddSectionFilesToCopyList Files-Dll $(SrcDir) $(!STF_WINDOWSSYSPATH)
   set !STF_NCPA_FLUSH_COPYLIST = TRUE
   CopyFilesInCopyList
   exit





[Source Media Descriptions]
    1  = "PCNTN3 Driver Disk"  , TAGFILE = disk1
;   2  = "Windows NT Setup CD-ROM Disk "  , TAGFILE = disk1
;   99  = "LMHOST disk", TAGFILE = lmhosts


[ProductType]
STF_PRODUCT  = Winnt
STF_PLATFORM = I386


[Files-Inf]
1, oemsetup.inf,    SIZE=50000,     RENAME=$(!UG_Filename)

[Files-PCNTN3]
1, pcntn3.SYS , SIZE=88888

[Files-Dll]
1, pcnetdlg.dll,  SIZE=10000

[Files-hlp]
1, PCNET.HLP, SIZE=12208


[LanguagesSupported]
    ENG

[OptionsTextENG]
    PCNTN3     = "AMD PCNET Family Ethernet Adapter"

[FileConstantsENG]
ProCaption   = "Windows NT Setup"
ProCancel    = "Cancel"
ProCancelMsg = "Windows NT Networking is not correctly installed.  "+
               "Are you sure you want to cancel copying files?"
ProCancelCap = "Network Setup Message"
ProText1     = "Copying:"
ProText2     = "To:"

FunctionTitle   = $(GenericAdapterName)" Card Setup"$(GenericInfVersion)

ProductSoftwareDescription = $(GenericDriverName)
ProductHardwareDescription = $(GenericAdapterName)
ProductHardwarePCNTN3Description="AMD PCnet Family Driver"

ProductSoftwareTitle =       $(GenericDriverName)
ProductHardwarePCNTN3Title =       $(GenericAdapterName)

DialogDllName   = "pcnetdlg.dll"


IRQList  = ^(IRQChoices, 1)
IRQValues = ^(IRQChoices, 2)

IOBaseAddrList = ^(IOBaseAddrChoices, 1)
IOBaseAddrValues = ^(IOBaseAddrChoices, 2)

DMAChannelList = ^(DMAChannelChoices,1)
DMAChannelValues = ^(DMAChannelChoices,2)

LEDList = ^(LEDChoices,1)
LEDValues = ^(LEDChoices,2)

FullDuplexList = ^(FullDuplexChoices,1)
FullDuplexValues = ^(FullDuplexChoices,2)

BusTimerList = ^(BusTimerChoices,1)
BusTimerValues = ^(BusTimerChoices,2)

[DialogConstantsENG]
Help        = "&Help"
Exit        = "Cancel"
OK          = "&OK"
HelpContext = ""
Continue    = "Continue"
Cancel      = "&Cancel"

[MemoryMappedChoicesENG]
Map_1 = 1, "ON"
Map_2 = 0, "OFF"

[FileDependentDlgENG]

DlgText = "Please select values for the following fields:"

DlgType = "RadioCombination"
DlgTemplate = "PCNTN3"
Caption = $(FunctionTitle)


CBOptionsGreyed = {}
NotifyFields = {NO, NO}
HelpContext = 1

Combo1Label = "I/O Port:"
Combo2Label = "IRQ Number:"
Combo3Label = "DMA Number:"
Combo4Label = "Full Duplex:"
Combo5Label = "Bus Timer:"
Combo6Label = "LED 0:"
Combo7Label = "LED 1:"
Combo8Label = "LED 2:"
Combo9Label = "LED 3:"

BigButton   = "More pcntn3 BS >>"

Combo1List = $(IOBaseAddrList)
Combo1Out  = $(IOBaseAddrValue)

Combo2List = $(IRQList)
Combo2Out  = $(IRQValue)

Combo3List = $(DMAChannelList)
Combo3Out  = $(DMAChannelValue)

Combo4List = $(FullDuplexList)
Combo4Out  = $(FullDuplexValue)

Combo5List = $(BusTimerList)
Combo5Out  = $(BusTimerValue)

Combo6List = $(LEDList)
Combo6Out  = $(LED0Value)

Combo7List = $(LEDList)
Combo7Out  = $(LED1Value)

Combo8List = $(LEDList)
Combo8Out  = $(LED2Value)

Combo9List = $(LEDList)
Combo9Out  = $(LED3Value)

ComboListItemsIn  = {Combo1List,Combo2List,Combo3List,Combo4List,Combo5List,Combo6List,Combo7List,Combo8List,Combo9List}
ComboListItemsOut = {Combo1Out,Combo2Out,Combo3Out,Combo4Out,Combo5Out,Combo6Out,Combo7Out,Combo8Out,Combo9Out}

EditTextIn = ""
EditTextLim = ""

CheckBox1 = "&TP"

Group1 = "&Bus to scan"

Radio1 = "PCI"
Radio2 = "PNP"
Radio3 = "VESA"
Radio4 = "ISA"
Radio5 = "PCI1"
Radio6 = "PCI2"
Radio7 = "ALL"

[IRQChoices]
IRQ_1 = "3",3
IRQ_2 = "4",4
IRQ_3 = "5",5
IRQ_4 = "9",9
IRQ_5 = "10",10
IRQ_6 = "11",11
IRQ_7 = "12",12
IRQ_8 = "15",15
IRQ_9 = "Auto_Scan",0

[IOBaseAddrChoices]
IOBase_1  = "0x200",512
IOBase_2  = "0x220",544
IOBase_3  = "0x240",576
IOBase_4  = "0x260",608
IOBase_5  = "0x280",640
IOBase_6  = "0x2a0",672
IOBase_7  = "0x2c0",714
IOBase_8  = "0x2e0",746
IOBase_9  = "0x300",768
IOBase_10 = "0x320",800
IOBase_11 = "0x340",832
IOBase_12 = "0x360",864
IOBase_13 = "0x380",896
IOBase_14 = "0x3a0",928
IOBase_15 = "0x3c0",960
IOBase_16 = "0x3e0",992
IOBase_17 = "Auto_Scan",0

[DMAChannelChoices]
DMAChannel_1 = "3",3
DMAChannel_2 = "5",5
DMAChannel_3 = "6",6
DMAChannel_4 = "7",7
DMAChannel_5 = "Auto_Scan",0

[LEDChoices]
LED_1 = "Default",65536
LED_2 = "0x0",0
LED_3 = "0x2",2
LED_4 = "0x4",4
LED_5 = "0x8",8
LED_6 = "0x10",16
LED_7 = "0x20",32
LED_8 = "0x30",48
LED_9 = "0x34",52
LED_10 = "0x40",64
LED_11 = "0xc0",192
LED_12 = "0x4088",16520
LED_13 = "0xb0",176
LED_14 = "0x21",129

[FullDuplexChoices]
FULLDUPLEX_1 = "OFF",1
FULLDUPLEX_2 = "AUI",2
FULLDUPLEX_3 = "UTP",3
FULLDUPLEX_4 = "Default",0

[BusTimerChoices]
BUSTIMER_1 = "5",5
BUSTIMER_2 = "6",6
BUSTIMER_3 = "7",7
BUSTIMER_4 = "8",8
BUSTIMER_5 = "9",9
BUSTIMER_6 = "10",10
BUSTIMER_7 = "11",11
BUSTIMER_8 = "12",12
BUSTIMER_9 = "13",13
BUSTIMER_10 = "Default",0

